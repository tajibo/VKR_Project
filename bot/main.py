# bot/main.py

import logging
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM

from telegram import BotCommand, Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    CallbackQueryHandler,
    MessageHandler,
    filters,
)

from db.database import SessionLocal, engine, Base
from db.models import User, Role, UserSetting, ErrorLog

# –ò–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
from bot.handlers.settings import settings_handler
from bot.handlers.feedback import request_feedback, process_feedback
from bot.handlers.stats import stats_command, stats_global_command
from bot.handlers.intent import intent_handler
from bot.handlers.summarize import summarize_handler
from bot.handlers.sentiment import sentiment_handler
from bot.handlers.topics import topics_handler
from bot.handlers.extract_deadlines import extract_deadlines_handler
from bot.handlers.generate_questions import generate_questions_handler
from bot.handlers.files import upload_handler, list_files_handler, download_file_handler

# –ò–º–ø–æ—Ä—Ç –Ω–æ–≤–æ–≥–æ –º–æ–¥—É–ª—è chat
import bot.handlers.chat as chat

from bot.handlers.utils import log_activity

# ---------------- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ----------------
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ---------------- –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã ----------------
Base.metadata.create_all(bind=engine)


# ---------------- –•–µ–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /start ----------------
@log_activity("start")
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tg_user = update.effective_user
    user_id = tg_user.id
    username = tg_user.username or ""
    first_name = tg_user.first_name or ""

    db = SessionLocal()
    try:
        db_user = db.query(User).filter(User.telegram_id == user_id).first()
        if not db_user:
            default_role = db.query(Role).filter(Role.name == "user").first()
            if not default_role:
                default_role = Role(name="user")
                db.add(default_role)
                db.commit()
                db.refresh(default_role)

            db_user = User(
                telegram_id=user_id,
                username=username,
                role_id=default_role.id
            )
            db.add(db_user)
            db.commit()

            # –°–æ–∑–¥–∞—ë–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            db_settings = UserSetting(
                user_id=db_user.id,
                pomodoro_duration=25,
                break_duration=5,
                notifications_enabled=True,
                preferred_language="ru",
                default_summary_length=3,
                deadline_notifications=True,
                flashcard_notifications=True
            )
            db.add(db_settings)
            db.commit()

            await update.message.reply_text(f"–ü—Ä–∏–≤–µ—Ç, {first_name}! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã ‚úÖ")
        else:
            await update.message.reply_text(f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {first_name}! –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –≤ –±–∞–∑–µ.")
    except Exception as e:
        db.rollback()
        err_db = SessionLocal()
        try:
            err_db.add(ErrorLog(
                user_id=db_user.id if 'db_user' in locals() and db_user else None,
                handler_name="start",
                error_text=str(e)
            ))
            err_db.commit()
        finally:
            err_db.close()

        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ üõë")
    finally:
        db.close()


# ---------------- –•–µ–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /help ----------------
@log_activity("help_command")
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "–≠—Ç–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –í–∏—Ç—Ç–µ.\n\n"
        "/start ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã\n"
        "/help ‚Äî —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É\n\n"
        "/settings ‚Äî –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ NLP-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ (—è–∑—ã–∫, –¥–ª–∏–Ω–∞ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)\n"
        "/intent <—Ç–µ–∫—Å—Ç> ‚Äî intent-–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è (—Ä–∞—Å–ø–æ–∑–Ω–∞—ë—Ç —Ü–µ–ª—å –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞)\n"
        "/summarize ‚Äî —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ (–±–æ—Ç –ø–æ–ø—Ä–æ—Å–∏—Ç –ø—Ä–∏—Å–ª–∞—Ç—å —Ç–µ–∫—Å—Ç)\n"
        "/sentiment <—Ç–µ–∫—Å—Ç> ‚Äî –∞–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ (–ø–æ–∑–∏—Ç–∏–≤/–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ/–Ω–µ–≥–∞—Ç–∏–≤–Ω–æ)\n"
        "/topics ‚Äî –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–º (–±–æ—Ç –ø–æ–ø—Ä–æ—Å–∏—Ç –ø—Ä–∏—Å–ª–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤)\n"
        "/extract_deadlines ‚Äî NER –¥–ª—è –¥–µ–¥–ª–∞–π–Ω–æ–≤ (–±–æ—Ç –ø–æ–ø—Ä–æ—Å–∏—Ç —Ç–µ–∫—Å—Ç)\n"
        "/generate_questions ‚Äî –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ (–±–æ—Ç –ø–æ–ø—Ä–æ—Å–∏—Ç —Ç–µ–∫—Å—Ç)\n\n"
        "/stats ‚Äî –≤–∞—à–∞ –ª–∏—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞\n"
        "/stats_global ‚Äî –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (—Ç–æ–ª—å–∫–æ admin)\n"
        "/upload ‚Äî –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª\n"
        "/list_files ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ —Ñ–∞–π–ª—ã\n"
        "/download <–∏–º—è_—Ñ–∞–π–ª–∞> ‚Äî —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª\n\n"
        "/cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é\n\n"
        "–ê–≤—Ç–æ—Ä: –¢–∞–∂–∏–±–æ–µ–≤ –î.–£."
    )
    await update.message.reply_text(text)


# ---------------- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ ----------------
async def set_commands(application):
    await application.bot.set_my_commands([
        BotCommand("start", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã"),
        BotCommand("help", "–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É"),
        BotCommand("settings", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ NLP-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"),
        BotCommand("intent", "Intent-–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è (/intent <—Ç–µ–∫—Å—Ç>)"),
        BotCommand("summarize", "–°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ (–±–æ—Ç –ø–æ–ø—Ä–æ—Å–∏—Ç —Ç–µ–∫—Å—Ç)"),
        BotCommand("sentiment", "–ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ (/sentiment <—Ç–µ–∫—Å—Ç>)"),
        BotCommand("topics", "–í—ã–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–º (–±–æ—Ç –ø–æ–ø—Ä–æ—Å–∏—Ç —Ç–µ–∫—Å—Ç—ã)"),
        BotCommand("extract_deadlines", "NER –¥–ª—è –¥–µ–¥–ª–∞–π–Ω–æ–≤ (–±–æ—Ç –ø–æ–ø—Ä–æ—Å–∏—Ç —Ç–µ–∫—Å—Ç)"),
        BotCommand("generate_questions", "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ (–±–æ—Ç –ø–æ–ø—Ä–æ—Å–∏—Ç —Ç–µ–∫—Å—Ç)"),
        BotCommand("stats", "–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"),
        BotCommand("stats_global", "–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (—Ç–æ–ª—å–∫–æ admin)"),
        BotCommand("upload", "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª"),
        BotCommand("list_files", "–ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ —Ñ–∞–π–ª—ã"),
        BotCommand("download", "–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª (/download <–∏–º—è_—Ñ–∞–π–ª–∞>)"),
        BotCommand("cancel", "–û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥"),
    ])


# ---------------- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ----------------
def main():
    TOKEN = "7542036376:AAEeWEqZUfUTboVJhw_ASZDDomMsRiwrVQA"
    if not TOKEN:
        logger.error("–¢–æ–∫–µ–Ω –Ω–µ –∑–∞–¥–∞–Ω.")
        return

    # ---------------- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ----------------
    application = ApplicationBuilder().token(TOKEN).build()

    # ---------------- –ü–û–î–ì–†–£–ó–ö–ê –î–ûO–ë–£–ß–ï–ù–ù–û–ô –ú–û–î–ï–õ–ò –ò–ó HUGGING FACE HUB ----------------
    # –ó–∞–º–µ–Ω–∏—Ç–µ <–≤–∞—à_username> –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º –Ω–∞ Hugging Face
    MODEL_REPO = "–≤–∞—à_username/ruDialoGPT-finetuned"

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä –∏ –º–æ–¥–µ–ª—å
    tokenizer_obj = AutoTokenizer.from_pretrained(MODEL_REPO)
    model_obj = AutoModelForCausalLM.from_pretrained(MODEL_REPO)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ (GPU, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω, –∏–Ω–∞—á–µ CPU)
    device_obj = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    model_obj.to(device_obj)

    # –ï—Å–ª–∏ pad_token –Ω–µ –∑–∞–¥–∞–Ω, —Å—Ç–∞–≤–∏–º –µ–≥–æ —Ä–∞–≤–Ω—ã–º eos_token
    if tokenizer_obj.pad_token_id is None:
        tokenizer_obj.add_special_tokens({"pad_token": tokenizer_obj.eos_token})
        model_obj.resize_token_embeddings(len(tokenizer_obj))

    # –ü–µ—Ä–µ–¥–∞—ë–º —ç—Ç–∏ –æ–±—ä–µ–∫—Ç—ã –≤ –º–æ–¥—É–ª—å chat
    chat.tokenizer = tokenizer_obj
    chat.model = model_obj
    chat.device = device_obj

    # ---------------- –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –•–ï–ù–î–õ–ï–†–û–í ----------------

    # 1) /start –∏ /help
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))

    # 2) ConversationHandler –¥–ª—è /settings (NLP-–Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
    application.add_handler(settings_handler)

    # 3) –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å (Inline-–∫–Ω–æ–ø–∫–∏)
    application.add_handler(CallbackQueryHandler(process_feedback, pattern="^(like|dislike)$"))

    # 4) –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    application.add_handler(CommandHandler("stats", stats_command))
    application.add_handler(CommandHandler("stats_global", stats_global_command))

    # 5) Intent-–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è
    application.add_handler(intent_handler)

    # 6) –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞
    application.add_handler(summarize_handler)

    # 7) –ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
    application.add_handler(sentiment_handler)

    # 8) –í—ã–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–º (Topic Modeling)
    application.add_handler(topics_handler)

    # 9) –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–µ–¥–ª–∞–π–Ω–æ–≤ (NER)
    application.add_handler(extract_deadlines_handler)

    # 10) –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤
    application.add_handler(generate_questions_handler)

    # 11) –§–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞: –∑–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
    application.add_handler(upload_handler)
    application.add_handler(list_files_handler)
    application.add_handler(download_file_handler)

    # 12) –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π /cancel (—Ñ–æ–ª–±—ç–∫ –¥–ª—è –≤—Å–µ—Ö ConversationHandler)
    application.add_handler(CommandHandler("cancel", settings_handler.fallbacks[0].callback))

    # ---------------- –•–ï–ù–î–õ–ï–† ‚Äú–°–≤–æ–±–æ–¥–Ω–æ–≥–æ —á–∞—Ç–∞‚Äù —á–µ—Ä–µ–∑ –¥–æ–æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å ----------------
    # –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: —ç—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä –Ω—É–∂–Ω–æ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ –≤—Å–µ—Ö
    # –¥—Ä—É–≥–∏—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö ConversationHandler‚Äô–æ–≤, —á—Ç–æ–±—ã –æ–Ω –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞–ª
    # –∫–æ–º–∞–Ω–¥—ã (/summarize, /extract_deadlines, –∏ —Ç.–¥.).
    application.add_handler(
        MessageHandler(filters.TEXT & ~filters.COMMAND, chat.chat_handler)
    )

    # –ü–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∑–∞–¥–∞—ë–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ Telegram
    application.post_init = set_commands

    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è‚Ä¶")
    application.run_polling()


if __name__ == "__main__":
    main()
