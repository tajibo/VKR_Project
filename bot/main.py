import os
import logging
from datetime import timedelta

from telegram import Update, BotCommand
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    CallbackContext,
)
from sqlalchemy import func  # <-- –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã func.now() —Ä–∞–±–æ—Ç–∞–ª

from db.database import SessionLocal, engine, Base
from db.models import User, Role, UserSetting, PomodoroSession

# ---------------- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ----------------
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ---------------- –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã ----------------
Base.metadata.create_all(bind=engine)


# ---------------- –•–µ–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /start ----------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tg_user = update.effective_user
    user_id = tg_user.id
    username = tg_user.username or ""
    first_name = tg_user.first_name or ""

    db = SessionLocal()
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        db_user = db.query(User).filter(User.telegram_id == user_id).first()
        if not db_user:
            # –ï—Å–ª–∏ –Ω–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–æ–ª—å "user"
            default_role = db.query(Role).filter(Role.name == "user").first()
            if not default_role:
                default_role = Role(name="user")
                db.add(default_role)
                db.commit()
                db.refresh(default_role)

            # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            db_user = User(
                telegram_id=user_id,
                username=username,
                role_id=default_role.id
            )
            db.add(db_user)
            db.commit()

            # –¢–∞–∫–∂–µ —Å—Ä–∞–∑—É —Å–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –≤ user_settings —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
            db_settings = UserSetting(
                user_id=db_user.id,
                pomodoro_duration=25,
                break_duration=5,
                notifications_enabled=True
            )
            db.add(db_settings)
            db.commit()

            await update.message.reply_text(
                f"–ü—Ä–∏–≤–µ—Ç, {first_name}! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã ‚úÖ"
            )
        else:
            await update.message.reply_text(
                f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {first_name}! –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —É–∂–µ –≤ –±–∞–∑–µ."
            )
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ë–î: %s", e)
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ üõë")
    finally:
        db.close()


# ---------------- –•–µ–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /help ----------------
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "–≠—Ç–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –í–∏—Ç—Ç–µ.\n\n"
        "/start ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã\n"
        "/help ‚Äî —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É\n\n"
        "/settings ‚Äî –ø—Ä–æ—Å–º–æ—Ç—Ä/–∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤–∞—à–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ pomodoro\n"
        "/set_pomodoro_duration <–º–∏–Ω—É—Ç—ã> ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã\n"
        "/set_break_duration <–º–∏–Ω—É—Ç—ã> ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Ä—ã–≤–∞\n"
        "/toggle_notifications ‚Äî –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n\n"
        "/start_pomodoro ‚Äî –Ω–∞—á–∞—Ç—å Pomodoro-—Å–µ—Å—Å–∏—é\n"
        "/stop_pomodoro ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é Pomodoro-—Å–µ—Å—Å–∏—é\n\n"
        "–ê–≤—Ç–æ—Ä: –¢–∞–∂–∏–±–æ–µ–≤ –î.–£."
    )
    await update.message.reply_text(text)


# ---------------- –•–µ–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /settings ----------------
async def settings_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    db = SessionLocal()
    try:
        db_user = db.query(User).filter(User.telegram_id == user_id).first()
        if not db_user:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
            return

        db_settings = db.query(UserSetting).filter(UserSetting.user_id == db_user.id).first()
        if not db_settings:
            # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ –æ–∫–∞–∑–∞–ª–æ—Å—å (–¥–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ñ–æ–ª—Ç)
            db_settings = UserSetting(
                user_id=db_user.id,
                pomodoro_duration=25,
                break_duration=5,
                notifications_enabled=True
            )
            db.add(db_settings)
            db.commit()

        text = (
            f"–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n"
            f"‚Ä¢ Pomodoro-–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {db_settings.pomodoro_duration} –º–∏–Ω.\n"
            f"‚Ä¢ Break-–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {db_settings.break_duration} –º–∏–Ω.\n"
            f"‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'–≤–∫–ª—é—á–µ–Ω—ã' if db_settings.notifications_enabled else '–≤—ã–∫–ª—é—á–µ–Ω—ã'}\n\n"
            "–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/set_pomodoro_duration <–º–∏–Ω—É—Ç—ã>\n"
            "/set_break_duration <–º–∏–Ω—É—Ç—ã>\n"
            "/toggle_notifications"
        )
        await update.message.reply_text(text)
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: %s", e)
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ üõë")
    finally:
        db.close()


# ---------------- –•–µ–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /set_pomodoro_duration ----------------
async def set_pomodoro_duration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    args = context.args  # –æ–∂–∏–¥–∞–µ–º [<–º–∏–Ω—É—Ç—ã>]

    if len(args) != 1 or not args[0].isdigit():
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_pomodoro_duration <—Ü–µ–ª–æ–µ_—á–∏—Å–ª–æ_–º–∏–Ω—É—Ç>")
        return

    minutes = int(args[0])
    if minutes <= 0:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç.")
        return

    db = SessionLocal()
    try:
        db_user = db.query(User).filter(User.telegram_id == user_id).first()
        if not db_user:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
            return

        db_settings = db.query(UserSetting).filter(UserSetting.user_id == db_user.id).first()
        if not db_settings:
            # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π: –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ –±—ã–ª–æ, —Å–æ–∑–¥–∞—ë–º
            db_settings = UserSetting(
                user_id=db_user.id,
                pomodoro_duration=minutes,
                break_duration=5,
                notifications_enabled=True
            )
            db.add(db_settings)
        else:
            db_settings.pomodoro_duration = minutes

        db.commit()
        await update.message.reply_text(f"Pomodoro-–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {minutes} –º–∏–Ω—É—Ç.")
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ pomodoro_duration: %s", e)
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å Pomodoro-–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å üõë")
    finally:
        db.close()


# ---------------- –•–µ–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /set_break_duration ----------------
async def set_break_duration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    args = context.args

    if len(args) != 1 or not args[0].isdigit():
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_break_duration <—Ü–µ–ª–æ–µ_—á–∏—Å–ª–æ_–º–∏–Ω—É—Ç>")
        return

    minutes = int(args[0])
    if minutes <= 0:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç.")
        return

    db = SessionLocal()
    try:
        db_user = db.query(User).filter(User.telegram_id == user_id).first()
        if not db_user:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
            return

        db_settings = db.query(UserSetting).filter(UserSetting.user_id == db_user.id).first()
        if not db_settings:
            db_settings = UserSetting(
                user_id=db_user.id,
                pomodoro_duration=25,
                break_duration=minutes,
                notifications_enabled=True
            )
            db.add(db_settings)
        else:
            db_settings.break_duration = minutes

        db.commit()
        await update.message.reply_text(f"Break-–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {minutes} –º–∏–Ω—É—Ç.")
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ break_duration: %s", e)
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å Break-–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å üõë")
    finally:
        db.close()


# ---------------- –•–µ–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /toggle_notifications ----------------
async def toggle_notifications(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    db = SessionLocal()
    try:
        db_user = db.query(User).filter(User.telegram_id == user_id).first()
        if not db_user:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
            return

        db_settings = db.query(UserSetting).filter(UserSetting.user_id == db_user.id).first()
        if not db_settings:
            db_settings = UserSetting(
                user_id=db_user.id,
                pomodoro_duration=25,
                break_duration=5,
                notifications_enabled=False
            )
            db.add(db_settings)
        else:
            db_settings.notifications_enabled = not db_settings.notifications_enabled

        db.commit()
        status = "–≤–∫–ª—é—á–µ–Ω—ã" if db_settings.notifications_enabled else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
        await update.message.reply_text(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {status}.")
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: %s", e)
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è üõë")
    finally:
        db.close()


# ---------------- –ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è Pomodoro ----------------
async def pomodoro_complete_callback(context: CallbackContext) -> None:
    """
    –≠—Ç–æ—Ç –∫–æ–ª–ª–±—ç–∫ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è JobQueue –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ pomodoro_duration –º–∏–Ω—É—Ç.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏ –≤ –ë–î.
    """
    job_data = context.job.data  # —Ö—Ä–∞–Ω–∏—Ç { "telegram_id": <id>, "session_id": <id> }
    telegram_id = job_data["telegram_id"]
    session_id = job_data["session_id"]

    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î: —Å—Ç–∞–≤–∏–º status="complete" –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º end_time
    db = SessionLocal()
    try:
        session = db.query(PomodoroSession).filter(PomodoroSession.id == session_id).first()
        if session and session.status == "start":
            session.status = "complete"
            session.end_time = func.now()
            db.commit()
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ PomodoroSession: %s", e)
    finally:
        db.close()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        await context.bot.send_message(
            chat_id=telegram_id,
            text="‚è∞ Pomodoro –∑–∞–≤–µ—Ä—à—ë–Ω! –ü–æ—Ä–∞ —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ—Ä—ã–≤."
        )
    except Exception as e:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ Pomodoro: %s", e)


# ---------------- –•–µ–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /start_pomodoro ----------------
async def start_pomodoro(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    db = SessionLocal()
    try:
        db_user = db.query(User).filter(User.telegram_id == user_id).first()
        if not db_user:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
            return

        db_settings = db.query(UserSetting).filter(UserSetting.user_id == db_user.id).first()
        if not db_settings:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /settings –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏.")
            return

        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é PomodoroSession —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "start"
        new_session = PomodoroSession(
            user_id=db_user.id,
            status="start"
        )
        db.add(new_session)
        db.commit()
        db.refresh(new_session)

        # –ü–ª–∞–Ω–∏—Ä—É–µ–º Job —á–µ—Ä–µ–∑ pomodoro_duration –º–∏–Ω—É—Ç
        # –í–∞–∂–Ω–æ: –±–µ—Ä—ë–º job_queue –∏–∑ application, –∞ –Ω–µ –∏–∑ context.job_queue
        context.application.job_queue.run_once(
            pomodoro_complete_callback,
            when=db_settings.pomodoro_duration * 60,  # –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            data={
                "telegram_id": user_id,
                "session_id": new_session.id
            }
        )

        await update.message.reply_text(
            f"‚úÖ Pomodoro –∑–∞–ø—É—â—ë–Ω –Ω–∞ {db_settings.pomodoro_duration} –º–∏–Ω—É—Ç. –£—Å–ø–µ—à–Ω–æ–π —Ä–∞–±–æ—Ç—ã!"
        )
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Pomodoro: %s", e)
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Pomodoro üõë")
    finally:
        db.close()


# ---------------- –•–µ–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /stop_pomodoro ----------------
async def stop_pomodoro(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    db = SessionLocal()
    try:
        db_user = db.query(User).filter(User.telegram_id == user_id).first()
        if not db_user:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
            return

        # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–µ—Å—Å–∏—é —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "start"
        session = (
            db.query(PomodoroSession)
            .filter(PomodoroSession.user_id == db_user.id, PomodoroSession.status == "start")
            .order_by(PomodoroSession.start_time.desc())
            .first()
        )
        if not session:
            await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π Pomodoro-—Å–µ—Å—Å–∏–∏ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
            return

        session.status = "stopped"
        session.end_time = func.now()
        db.commit()

        await update.message.reply_text("‚èπ Pomodoro –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–æ—Å—Ä–æ—á–Ω–æ.")
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ Pomodoro: %s", e)
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Pomodoro üõë")
    finally:
        db.close()


# ---------------- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ ----------------
async def set_commands(application):
    await application.bot.set_my_commands([
        BotCommand("start", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã"),
        BotCommand("help", "–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É"),
        BotCommand("settings", "–ü—Ä–æ—Å–º–æ—Ç—Ä/–∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Pomodoro"),
        BotCommand("set_pomodoro_duration", "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å Pomodoro (–º–∏–Ω.)"),
        BotCommand("set_break_duration", "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Ä—ã–≤–∞ (–º–∏–Ω.)"),
        BotCommand("toggle_notifications", "–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"),
        BotCommand("start_pomodoro", "–ó–∞–ø—É—Å—Ç–∏—Ç—å Pomodoro-—Å–µ—Å—Å–∏—é"),
        BotCommand("stop_pomodoro", "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é Pomodoro-—Å–µ—Å—Å–∏—é"),
    ])


# ---------------- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ----------------
def main():
    # –ñ–µ—Å—Ç–∫–æ –∑–∞—Ö–∞—Ä–¥–∫–æ–¥–∏–º —Ç–æ–∫–µ–Ω (–≤–∞—à –Ω–∞—Å—Ç–æ—è—â–∏–π —Ç–æ–∫–µ–Ω)
    TOKEN = "7542036376:AAEeWEqZUfUTboVJhw_ASZDDomMsRiwrVQA"

    print(">>> TELEGRAM_TOKEN =", TOKEN)

    if not TOKEN:
        logger.error("–¢–æ–∫–µ–Ω –Ω–µ –∑–∞–¥–∞–Ω.")
        return

    # –°—Ç—Ä–æ–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram Bot
    application = ApplicationBuilder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("settings", settings_command))
    application.add_handler(CommandHandler("set_pomodoro_duration", set_pomodoro_duration))
    application.add_handler(CommandHandler("set_break_duration", set_break_duration))
    application.add_handler(CommandHandler("toggle_notifications", toggle_notifications))
    application.add_handler(CommandHandler("start_pomodoro", start_pomodoro))
    application.add_handler(CommandHandler("stop_pomodoro", stop_pomodoro))

    # –ü–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–∏–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –≤ Telegram
    application.post_init = set_commands

    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è‚Ä¶")
    application.run_polling()


if __name__ == "__main__":
    main()
