# bot/main.py

import logging

from telegram import Update, BotCommand
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters,
)
from sqlalchemy import func

from db.database import SessionLocal, engine, Base
from db.models import User, Role, UserSetting, PomodoroSession

# –•–µ–Ω–¥–ª–µ—Ä—ã –∏–∑ –ø–∞–ø–∫–∏ handlers
from bot.handlers.settings import (
    settings_command,
    toggle_notifications,
    set_pomodoro_duration_start,
    set_pomodoro_duration_receive,
    cancel_pomodoro_duration,
    set_break_duration_start,
    set_break_duration_receive,
    cancel_break_duration,
    POMODORO_DURATION,
    BREAK_DURATION,
)
from bot.handlers.pomodoro import (
    start_pomodoro,
    stop_pomodoro,
)

# ---------------- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ----------------
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ---------------- –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã ----------------
Base.metadata.create_all(bind=engine)


# ---------------- –•–µ–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /start ----------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tg_user = update.effective_user
    user_id = tg_user.id
    username = tg_user.username or ""
    first_name = tg_user.first_name or ""

    db = SessionLocal()
    try:
        db_user = db.query(User).filter(User.telegram_id == user_id).first()
        if not db_user:
            default_role = db.query(Role).filter(Role.name == "user").first()
            if not default_role:
                default_role = Role(name="user")
                db.add(default_role)
                db.commit()
                db.refresh(default_role)

            db_user = User(
                telegram_id=user_id,
                username=username,
                role_id=default_role.id
            )
            db.add(db_user)
            db.commit()

            db_settings = UserSetting(
                user_id=db_user.id,
                pomodoro_duration=25,
                break_duration=5,
                notifications_enabled=True
            )
            db.add(db_settings)
            db.commit()

            await update.message.reply_text(
                f"–ü—Ä–∏–≤–µ—Ç, {first_name}! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã ‚úÖ"
            )
        else:
            await update.message.reply_text(
                f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {first_name}! –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —É–∂–µ –≤ –±–∞–∑–µ."
            )
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ë–î: %s", e)
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ üõë")
    finally:
        db.close()


# ---------------- –•–µ–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /help ----------------
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "–≠—Ç–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –í–∏—Ç—Ç–µ.\n\n"
        "/start ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã\n"
        "/help ‚Äî —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É\n\n"
        "/settings ‚Äî –ø—Ä–æ—Å–º–æ—Ç—Ä/–∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤–∞—à–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ Pomodoro\n"
        "/set_pomodoro_duration ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å Pomodoro-–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–±–æ—Ç –∑–∞–¥–∞—Å—Ç –≤–æ–ø—Ä–æ—Å)\n"
        "/set_break_duration ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Ä—ã–≤–∞ (–±–æ—Ç –∑–∞–¥–∞—Å—Ç –≤–æ–ø—Ä–æ—Å)\n"
        "/toggle_notifications ‚Äî –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n\n"
        "/start_pomodoro ‚Äî –Ω–∞—á–∞—Ç—å Pomodoro-—Å–µ—Å—Å–∏—é\n"
        "/stop_pomodoro ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é Pomodoro-—Å–µ—Å—Å–∏—é\n\n"
        "–ê–≤—Ç–æ—Ä: –¢–∞–∂–∏–±–æ–µ–≤ –î.–£."
    )
    await update.message.reply_text(text)


# ---------------- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ ----------------
async def set_commands(application):
    await application.bot.set_my_commands([
        BotCommand("start", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã"),
        BotCommand("help", "–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É"),
        BotCommand("settings", "–ü—Ä–æ—Å–º–æ—Ç—Ä/–∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Pomodoro"),
        BotCommand("set_pomodoro_duration", "–ò–∑–º–µ–Ω–∏—Ç—å Pomodoro-–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–±–æ—Ç —Å–ø—Ä–æ—Å–∏—Ç)"),
        BotCommand("set_break_duration", "–ò–∑–º–µ–Ω–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Ä—ã–≤–∞ (–±–æ—Ç —Å–ø—Ä–æ—Å–∏—Ç)"),
        BotCommand("toggle_notifications", "–í–∫–ª/–≤—ã–∫–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"),
        BotCommand("start_pomodoro", "–ó–∞–ø—É—Å—Ç–∏—Ç—å Pomodoro-—Å–µ—Å—Å–∏—é"),
        BotCommand("stop_pomodoro", "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é Pomodoro-—Å–µ—Å—Å–∏—é"),
    ])


# ---------------- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ----------------
def main():
    TOKEN = "7542036376:AAEeWEqZUfUTboVJhw_ASZDDomMsRiwrVQA"
    if not TOKEN:
        logger.error("–¢–æ–∫–µ–Ω –Ω–µ –∑–∞–¥–∞–Ω.")
        return

    application = ApplicationBuilder().token(TOKEN).build()

    # --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ ---

    # 1) /start –∏ /help
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))

    # 2) ConversationHandler –¥–ª—è /set_pomodoro_duration
    conv_pomodoro = ConversationHandler(
        entry_points=[CommandHandler("set_pomodoro_duration", set_pomodoro_duration_start)],
        states={
            POMODORO_DURATION: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, set_pomodoro_duration_receive),
                # –ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–ª–∞–≤–∏—à—É ¬´–û—Ç–º–µ–Ω–∞¬ª
                MessageHandler(filters.Regex("^(–û—Ç–º–µ–Ω–∞|cancel)$"), cancel_pomodoro_duration),
            ],
        },
        fallbacks=[MessageHandler(filters.Regex("^(–û—Ç–º–µ–Ω–∞|cancel)$"), cancel_pomodoro_duration)],
        allow_reentry=True,
    )
    application.add_handler(conv_pomodoro)

    # 3) ConversationHandler –¥–ª—è /set_break_duration
    conv_break = ConversationHandler(
        entry_points=[CommandHandler("set_break_duration", set_break_duration_start)],
        states={
            BREAK_DURATION: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, set_break_duration_receive),
                MessageHandler(filters.Regex("^(–û—Ç–º–µ–Ω–∞|cancel)$"), cancel_break_duration),
            ],
        },
        fallbacks=[MessageHandler(filters.Regex("^(–û—Ç–º–µ–Ω–∞|cancel)$"), cancel_break_duration)],
        allow_reentry=True,
    )
    application.add_handler(conv_break)

    # 4) /settings (–ø—Ä–æ—Å—Ç–æ–µ —á—Ç–µ–Ω–∏–µ)
    application.add_handler(CommandHandler("settings", settings_command))

    # 5) /toggle_notifications (–º–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ)
    application.add_handler(CommandHandler("toggle_notifications", toggle_notifications))

    # 6) Pomodoro-—Å–µ—Å—Å–∏–∏
    application.add_handler(CommandHandler("start_pomodoro", start_pomodoro))
    application.add_handler(CommandHandler("stop_pomodoro", stop_pomodoro))

    # –ü–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∑–∞–¥–∞—ë–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ Telegram
    application.post_init = set_commands

    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è‚Ä¶")
    application.run_polling()


if __name__ == "__main__":
    main()
