import os
import logging

from telegram import Update, BotCommand
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
)

from db.database import SessionLocal, engine, Base
from db.models import User, Role

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã ---
Base.metadata.create_all(bind=engine)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tg_user = update.effective_user
    user_id = tg_user.id
    username = tg_user.username or ""
    first_name = tg_user.first_name or ""

    db = SessionLocal()
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç telegram_id
        db_user = db.query(User).filter(User.telegram_id == user_id).first()
        if not db_user:
            # –ï—Å–ª–∏ —Ä–æ–ª–∏ "user" –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º
            default_role = db.query(Role).filter(Role.name == "user").first()
            if not default_role:
                default_role = Role(name="user")
                db.add(default_role)
                db.commit()
                db.refresh(default_role)

            # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            db_user = User(
                telegram_id=user_id,
                username=username,
                role_id=default_role.id
            )
            db.add(db_user)
            db.commit()
            await update.message.reply_text(
                f"–ü—Ä–∏–≤–µ—Ç, {first_name}! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã ‚úÖ"
            )
        else:
            await update.message.reply_text(
                f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {first_name}! –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —É–∂–µ –≤ –±–∞–∑–µ."
            )
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ë–î: %s", e)
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ üõë")
    finally:
        db.close()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help ---
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "–≠—Ç–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –í–∏—Ç—Ç–µ.\n\n"
        "/start ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã\n"
        "/help ‚Äî —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É\n\n"
        "–ê–≤—Ç–æ—Ä: –ò–≤–∞–Ω–æ–≤ –ò.–ò."
    )
    await update.message.reply_text(text)

# --- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ (–±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω–∞ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏) ---
async def set_commands(application):
    await application.bot.set_my_commands([
        BotCommand("start", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã"),
        BotCommand("help", "–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É"),
    ])

# --- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ---
def main():
    # –ó–∞—Ö–∞—Ä–¥–∫–æ–¥–∏–º —Ç–æ–∫–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è —É–ø—Ä–æ—â—ë–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏.
    # –í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ –∏–º–µ–Ω–Ω–æ —Ç–æ—Ç —Ç–æ–∫–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –¥–∞–ª –≤–∞–º BotFather:
    TOKEN = "7542036376:AAEeWEqZUfUTboVJhw_ASZDDomMsRiwrVQA"
    print(">>> TELEGRAM_TOKEN =", TOKEN)

    if not TOKEN or TOKEN.startswith("–í–ê–®_"):
        logger.error("–¢–æ–∫–µ–Ω –Ω–µ –∑–∞–¥–∞–Ω –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω.")
        return

    application = ApplicationBuilder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))

    # –ü—Ä–∏–≤—è–∂–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –∫–æ–º–∞–Ω–¥ –∫ post_init
    application.post_init = set_commands

    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è‚Ä¶")
    application.run_polling()

if __name__ == "__main__":
    main()
