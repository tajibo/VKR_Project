# bot/handlers/stats.py

import io
import matplotlib.pyplot as plt
from telegram import Update, InputFile
from telegram.ext import ContextTypes
from sqlalchemy import func
from db.database import SessionLocal
from db.models import User, UserActivity, ErrorLog

from bot.handlers.utils import log_activity

@log_activity("stats_user")
async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    /stats ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª–∏—á–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
      - –æ–±—â–µ–µ —á–∏—Å–ª–æ –∑–∞–ø—Ä–æ—Å–æ–≤
      - —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
      - –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø—Ä–æ—Å–æ–≤ (query_text, response_time_ms)
    """
    user_id_telegram = update.effective_user.id
    db = SessionLocal()
    try:
        db_user = db.query(User).filter(User.telegram_id == user_id_telegram).first()
        if not db_user:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start.")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_requests = db.query(func.count(UserActivity.id)).filter(UserActivity.user_id == db_user.id).scalar()
        avg_time = db.query(func.avg(UserActivity.response_time_ms)).filter(UserActivity.user_id == db_user.id).scalar()

        last_5 = (
            db.query(UserActivity)
            .filter(UserActivity.user_id == db_user.id)
            .order_by(UserActivity.timestamp.desc())
            .limit(5)
            .all()
        )

        text = (
            f"<b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {total_requests or 0}\n"
            f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {int(avg_time) if avg_time else 0} –º—Å\n\n"
            f"<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø—Ä–æ—Å–æ–≤:</b>\n"
        )
        for act in last_5:
            q_text = act.query_text or "(–Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞)"
            rt = act.response_time_ms or 0
            text += f"‚Äì ¬´{q_text[:50]}...¬ª ‚Üí {rt} –º—Å\n"

        await update.message.reply_html(text)

    except Exception as e:
        db.rollback()
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        err_db = SessionLocal()
        try:
            err_db.add(ErrorLog(
                user_id=db_user.id if 'db_user' in locals() and db_user else None,
                handler_name="stats_user",
                error_text=str(e)
            ))
            err_db.commit()
        finally:
            err_db.close()

        await update.message.reply_text("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        db.close()


@log_activity("stats_global")
async def stats_global_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    /stats_global ‚Äî –≤—ã–≤–æ–¥–∏—Ç –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
    –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ admin.
    """
    user_id_telegram = update.effective_user.id
    db = SessionLocal()
    try:
        db_user = db.query(User).filter(User.telegram_id == user_id_telegram).first()
        if not db_user or db_user.role.name != "admin":
            await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
            return

        # –¢–æ–ø-5 —Å–∞–º—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–ø—Ä–æ—Å–æ–≤
        top_handlers = (
            db.query(UserActivity.handler_name, func.count(UserActivity.id).label("cnt"))
            .group_by(UserActivity.handler_name)
            .order_by(func.count(UserActivity.id).desc())
            .limit(5)
            .all()
        )

        # –¢–æ–ø-5 —Å–∞–º—ã—Ö –º–µ–¥–ª–µ–Ω–Ω—ã—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ –ø–æ —Å—Ä–µ–¥–Ω–µ–º—É –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞
        slow_handlers = (
            db.query(UserActivity.handler_name, func.avg(UserActivity.response_time_ms).label("avg_rt"))
            .group_by(UserActivity.handler_name)
            .order_by(func.avg(UserActivity.response_time_ms).desc())
            .limit(5)
            .all()
        )

        total_users = db.query(func.count(User.id)).scalar()

        text = (
            f"<b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±–æ—Ç—É:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n\n"
            f"<b>–¢–æ–ø-5 —Å–∞–º—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ (–ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–ø—Ä–æ—Å–æ–≤):</b>\n"
        )
        for handler_name, cnt in top_handlers:
            text += f"‚Äì {handler_name}: {cnt} –∑–∞–ø—Ä–æ—Å–æ–≤\n"

        text += "\n<b>–¢–æ–ø-5 —Å–∞–º—ã—Ö –º–µ–¥–ª–µ–Ω–Ω—ã—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ (–ø–æ —Å—Ä–µ–¥–Ω–µ–º—É –≤—Ä–µ–º–µ–Ω–∏):</b>\n"
        for handler_name, avg_rt in slow_handlers:
            text += f"‚Äì {handler_name}: {int(avg_rt)} –º—Å\n"

        await update.message.reply_html(text)

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ ¬´—á–∏—Å–ª–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –¥–Ω—è–º¬ª
        # –ù–∏–∂–µ –ø—Ä–∏–≤–µ–¥—ë–Ω –ø—Ä–∏–º–µ—Ä –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–∞–∫–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞:
        dates_counts = (
            db.query(
                func.date(UserActivity.timestamp).label("day"),
                func.count(UserActivity.id).label("cnt")
            )
            .group_by(func.date(UserActivity.timestamp))
            .order_by(func.date(UserActivity.timestamp))
            .all()
        )
        if dates_counts:
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å–ø–∏—Å–∫–∏
            days = [str(row.day) for row in dates_counts]
            counts = [row.cnt for row in dates_counts]

            plt.figure(figsize=(6,4))
            plt.plot(days, counts, marker="o")
            plt.xticks(rotation=45, ha="right")
            plt.title("–ó–∞–ø—Ä–æ—Å—ã –ø–æ –¥–Ω—è–º")
            plt.xlabel("–î–∞—Ç–∞")
            plt.ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤")
            plt.tight_layout()

            buf = io.BytesIO()
            plt.savefig(buf, format="png")
            buf.seek(0)
            plt.close()

            await context.bot.send_photo(
                chat_id=update.effective_chat.id,
                photo=InputFile(buf, filename="requests_by_day.png"),
                caption="–ì—Ä–∞—Ñ–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –¥–Ω—è–º"
            )

    except Exception as e:
        db.rollback()
        err_db = SessionLocal()
        try:
            err_db.add(ErrorLog(
                user_id=db_user.id if 'db_user' in locals() and db_user else None,
                handler_name="stats_global",
                error_text=str(e)
            ))
            err_db.commit()
        finally:
            err_db.close()

        await update.message.reply_text("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.")
    finally:
        db.close()
